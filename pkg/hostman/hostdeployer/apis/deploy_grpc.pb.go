// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: deploy.proto

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployAgentClient is the client API for DeployAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployAgentClient interface {
	DeployGuestFs(ctx context.Context, in *DeployParams, opts ...grpc.CallOption) (*DeployGuestFsResponse, error)
	ResizeFs(ctx context.Context, in *ResizeFsParams, opts ...grpc.CallOption) (*Empty, error)
	FormatFs(ctx context.Context, in *FormatFsParams, opts ...grpc.CallOption) (*Empty, error)
	SaveToGlance(ctx context.Context, in *SaveToGlanceParams, opts ...grpc.CallOption) (*SaveToGlanceResponse, error)
	ProbeImageInfo(ctx context.Context, in *ProbeImageInfoPramas, opts ...grpc.CallOption) (*ImageInfo, error)
	ConnectEsxiDisks(ctx context.Context, in *ConnectEsxiDisksParams, opts ...grpc.CallOption) (*EsxiDisksConnectionInfo, error)
	DisconnectEsxiDisks(ctx context.Context, in *EsxiDisksConnectionInfo, opts ...grpc.CallOption) (*Empty, error)
}

type deployAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployAgentClient(cc grpc.ClientConnInterface) DeployAgentClient {
	return &deployAgentClient{cc}
}

func (c *deployAgentClient) DeployGuestFs(ctx context.Context, in *DeployParams, opts ...grpc.CallOption) (*DeployGuestFsResponse, error) {
	out := new(DeployGuestFsResponse)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/DeployGuestFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) ResizeFs(ctx context.Context, in *ResizeFsParams, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/ResizeFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) FormatFs(ctx context.Context, in *FormatFsParams, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/FormatFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) SaveToGlance(ctx context.Context, in *SaveToGlanceParams, opts ...grpc.CallOption) (*SaveToGlanceResponse, error) {
	out := new(SaveToGlanceResponse)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/SaveToGlance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) ProbeImageInfo(ctx context.Context, in *ProbeImageInfoPramas, opts ...grpc.CallOption) (*ImageInfo, error) {
	out := new(ImageInfo)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/ProbeImageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) ConnectEsxiDisks(ctx context.Context, in *ConnectEsxiDisksParams, opts ...grpc.CallOption) (*EsxiDisksConnectionInfo, error) {
	out := new(EsxiDisksConnectionInfo)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/ConnectEsxiDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployAgentClient) DisconnectEsxiDisks(ctx context.Context, in *EsxiDisksConnectionInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/apis.DeployAgent/DisconnectEsxiDisks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployAgentServer is the server API for DeployAgent service.
// All implementations must embed UnimplementedDeployAgentServer
// for forward compatibility
type DeployAgentServer interface {
	DeployGuestFs(context.Context, *DeployParams) (*DeployGuestFsResponse, error)
	ResizeFs(context.Context, *ResizeFsParams) (*Empty, error)
	FormatFs(context.Context, *FormatFsParams) (*Empty, error)
	SaveToGlance(context.Context, *SaveToGlanceParams) (*SaveToGlanceResponse, error)
	ProbeImageInfo(context.Context, *ProbeImageInfoPramas) (*ImageInfo, error)
	ConnectEsxiDisks(context.Context, *ConnectEsxiDisksParams) (*EsxiDisksConnectionInfo, error)
	DisconnectEsxiDisks(context.Context, *EsxiDisksConnectionInfo) (*Empty, error)
	mustEmbedUnimplementedDeployAgentServer()
}

// UnimplementedDeployAgentServer must be embedded to have forward compatible implementations.
type UnimplementedDeployAgentServer struct {
}

func (UnimplementedDeployAgentServer) DeployGuestFs(context.Context, *DeployParams) (*DeployGuestFsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployGuestFs not implemented")
}
func (UnimplementedDeployAgentServer) ResizeFs(context.Context, *ResizeFsParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeFs not implemented")
}
func (UnimplementedDeployAgentServer) FormatFs(context.Context, *FormatFsParams) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatFs not implemented")
}
func (UnimplementedDeployAgentServer) SaveToGlance(context.Context, *SaveToGlanceParams) (*SaveToGlanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToGlance not implemented")
}
func (UnimplementedDeployAgentServer) ProbeImageInfo(context.Context, *ProbeImageInfoPramas) (*ImageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProbeImageInfo not implemented")
}
func (UnimplementedDeployAgentServer) ConnectEsxiDisks(context.Context, *ConnectEsxiDisksParams) (*EsxiDisksConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectEsxiDisks not implemented")
}
func (UnimplementedDeployAgentServer) DisconnectEsxiDisks(context.Context, *EsxiDisksConnectionInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectEsxiDisks not implemented")
}
func (UnimplementedDeployAgentServer) mustEmbedUnimplementedDeployAgentServer() {}

// UnsafeDeployAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployAgentServer will
// result in compilation errors.
type UnsafeDeployAgentServer interface {
	mustEmbedUnimplementedDeployAgentServer()
}

func RegisterDeployAgentServer(s grpc.ServiceRegistrar, srv DeployAgentServer) {
	s.RegisterService(&DeployAgent_ServiceDesc, srv)
}

func _DeployAgent_DeployGuestFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).DeployGuestFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/DeployGuestFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).DeployGuestFs(ctx, req.(*DeployParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_ResizeFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeFsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).ResizeFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/ResizeFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).ResizeFs(ctx, req.(*ResizeFsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_FormatFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatFsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).FormatFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/FormatFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).FormatFs(ctx, req.(*FormatFsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_SaveToGlance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveToGlanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).SaveToGlance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/SaveToGlance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).SaveToGlance(ctx, req.(*SaveToGlanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_ProbeImageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeImageInfoPramas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).ProbeImageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/ProbeImageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).ProbeImageInfo(ctx, req.(*ProbeImageInfoPramas))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_ConnectEsxiDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectEsxiDisksParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).ConnectEsxiDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/ConnectEsxiDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).ConnectEsxiDisks(ctx, req.(*ConnectEsxiDisksParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployAgent_DisconnectEsxiDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EsxiDisksConnectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployAgentServer).DisconnectEsxiDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.DeployAgent/DisconnectEsxiDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployAgentServer).DisconnectEsxiDisks(ctx, req.(*EsxiDisksConnectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployAgent_ServiceDesc is the grpc.ServiceDesc for DeployAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.DeployAgent",
	HandlerType: (*DeployAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployGuestFs",
			Handler:    _DeployAgent_DeployGuestFs_Handler,
		},
		{
			MethodName: "ResizeFs",
			Handler:    _DeployAgent_ResizeFs_Handler,
		},
		{
			MethodName: "FormatFs",
			Handler:    _DeployAgent_FormatFs_Handler,
		},
		{
			MethodName: "SaveToGlance",
			Handler:    _DeployAgent_SaveToGlance_Handler,
		},
		{
			MethodName: "ProbeImageInfo",
			Handler:    _DeployAgent_ProbeImageInfo_Handler,
		},
		{
			MethodName: "ConnectEsxiDisks",
			Handler:    _DeployAgent_ConnectEsxiDisks_Handler,
		},
		{
			MethodName: "DisconnectEsxiDisks",
			Handler:    _DeployAgent_DisconnectEsxiDisks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy.proto",
}
