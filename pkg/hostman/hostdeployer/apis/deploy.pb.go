// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: deploy.proto

// protoc --version=libprotoc 3.11.3
// protoc-gen-go --version=v1.3.5
// protoc --go_out=plugins=grpc:.  pkg/hostman/hostdeployer/apis/deploy.proto

package apis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GuestDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid        string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Domain      string  `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Nics        []*Nic  `protobuf:"bytes,4,rep,name=nics,proto3" json:"nics,omitempty"`
	NicsStandby []*Nic  `protobuf:"bytes,5,rep,name=nics_standby,json=nicsStandby,proto3" json:"nics_standby,omitempty"`
	Disks       []*Disk `protobuf:"bytes,6,rep,name=disks,proto3" json:"disks,omitempty"`
	Hypervisor  string  `protobuf:"bytes,7,opt,name=Hypervisor,proto3" json:"Hypervisor,omitempty"`
	Hostname    string  `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GuestDesc) Reset() {
	*x = GuestDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestDesc) ProtoMessage() {}

func (x *GuestDesc) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestDesc.ProtoReflect.Descriptor instead.
func (*GuestDesc) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *GuestDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuestDesc) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GuestDesc) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GuestDesc) GetNics() []*Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *GuestDesc) GetNicsStandby() []*Nic {
	if x != nil {
		return x.NicsStandby
	}
	return nil
}

func (x *GuestDesc) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *GuestDesc) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *GuestDesc) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId          string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	Driver          string `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	CacheMode       string `protobuf:"bytes,3,opt,name=cache_mode,json=cacheMode,proto3" json:"cache_mode,omitempty"`
	AioMode         string `protobuf:"bytes,4,opt,name=aio_mode,json=aioMode,proto3" json:"aio_mode,omitempty"`
	Size            int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	TemplateId      string `protobuf:"bytes,6,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	ImagePath       string `protobuf:"bytes,7,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	StorageId       string `protobuf:"bytes,8,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	Migrating       bool   `protobuf:"varint,9,opt,name=migrating,proto3" json:"migrating,omitempty"`
	TargetStorageId string `protobuf:"bytes,10,opt,name=target_storage_id,json=targetStorageId,proto3" json:"target_storage_id,omitempty"`
	Path            string `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	Format          string `protobuf:"bytes,12,opt,name=format,proto3" json:"format,omitempty"`
	Index           int32  `protobuf:"varint,13,opt,name=index,proto3" json:"index,omitempty"`
	MergeSnapshot   bool   `protobuf:"varint,14,opt,name=merge_snapshot,json=mergeSnapshot,proto3" json:"merge_snapshot,omitempty"`
	Fs              string `protobuf:"bytes,15,opt,name=fs,proto3" json:"fs,omitempty"`
	Mountpoint      string `protobuf:"bytes,16,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	Dev             string `protobuf:"bytes,17,opt,name=dev,proto3" json:"dev,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *Disk) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *Disk) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Disk) GetCacheMode() string {
	if x != nil {
		return x.CacheMode
	}
	return ""
}

func (x *Disk) GetAioMode() string {
	if x != nil {
		return x.AioMode
	}
	return ""
}

func (x *Disk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Disk) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *Disk) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *Disk) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *Disk) GetMigrating() bool {
	if x != nil {
		return x.Migrating
	}
	return false
}

func (x *Disk) GetTargetStorageId() string {
	if x != nil {
		return x.TargetStorageId
	}
	return ""
}

func (x *Disk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Disk) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Disk) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Disk) GetMergeSnapshot() bool {
	if x != nil {
		return x.MergeSnapshot
	}
	return false
}

func (x *Disk) GetFs() string {
	if x != nil {
		return x.Fs
	}
	return ""
}

func (x *Disk) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *Disk) GetDev() string {
	if x != nil {
		return x.Dev
	}
	return ""
}

type Nic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac        string   `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip         string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Net        string   `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
	NetId      string   `protobuf:"bytes,4,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	Virtual    bool     `protobuf:"varint,5,opt,name=virtual,proto3" json:"virtual,omitempty"`
	Gateway    string   `protobuf:"bytes,6,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns        string   `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty"`
	Domain     string   `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
	Routes     string   `protobuf:"bytes,9,opt,name=routes,proto3" json:"routes,omitempty"`
	Ifname     string   `protobuf:"bytes,10,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Masklen    int32    `protobuf:"varint,11,opt,name=masklen,proto3" json:"masklen,omitempty"`
	Driver     string   `protobuf:"bytes,12,opt,name=driver,proto3" json:"driver,omitempty"`
	Bridge     string   `protobuf:"bytes,13,opt,name=bridge,proto3" json:"bridge,omitempty"`
	WireId     string   `protobuf:"bytes,14,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	Vlan       int32    `protobuf:"varint,15,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Interface  string   `protobuf:"bytes,16,opt,name=interface,proto3" json:"interface,omitempty"`
	Bw         int32    `protobuf:"varint,17,opt,name=bw,proto3" json:"bw,omitempty"`
	Index      int32    `protobuf:"varint,18,opt,name=index,proto3" json:"index,omitempty"`
	VirtualIps []string `protobuf:"bytes,19,rep,name=virtual_ips,json=virtualIps,proto3" json:"virtual_ips,omitempty"`
	ExternelId string   `protobuf:"bytes,20,opt,name=externel_id,json=externelId,proto3" json:"externel_id,omitempty"`
	TeamWith   string   `protobuf:"bytes,21,opt,name=team_with,json=teamWith,proto3" json:"team_with,omitempty"`
	Manual     bool     `protobuf:"varint,22,opt,name=manual,proto3" json:"manual,omitempty"`
	NicType    string   `protobuf:"bytes,23,opt,name=nic_type,json=nicType,proto3" json:"nic_type,omitempty"`
	LinkUp     bool     `protobuf:"varint,24,opt,name=link_up,json=linkUp,proto3" json:"link_up,omitempty"`
	Mtu        int64    `protobuf:"varint,25,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Name       string   `protobuf:"bytes,26,opt,name=name,proto3" json:"name,omitempty"`
	IsDefault  bool     `protobuf:"varint,27,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *Nic) Reset() {
	*x = Nic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nic) ProtoMessage() {}

func (x *Nic) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nic.ProtoReflect.Descriptor instead.
func (*Nic) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *Nic) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Nic) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Nic) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *Nic) GetNetId() string {
	if x != nil {
		return x.NetId
	}
	return ""
}

func (x *Nic) GetVirtual() bool {
	if x != nil {
		return x.Virtual
	}
	return false
}

func (x *Nic) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Nic) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *Nic) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Nic) GetRoutes() string {
	if x != nil {
		return x.Routes
	}
	return ""
}

func (x *Nic) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *Nic) GetMasklen() int32 {
	if x != nil {
		return x.Masklen
	}
	return 0
}

func (x *Nic) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Nic) GetBridge() string {
	if x != nil {
		return x.Bridge
	}
	return ""
}

func (x *Nic) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

func (x *Nic) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *Nic) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Nic) GetBw() int32 {
	if x != nil {
		return x.Bw
	}
	return 0
}

func (x *Nic) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Nic) GetVirtualIps() []string {
	if x != nil {
		return x.VirtualIps
	}
	return nil
}

func (x *Nic) GetExternelId() string {
	if x != nil {
		return x.ExternelId
	}
	return ""
}

func (x *Nic) GetTeamWith() string {
	if x != nil {
		return x.TeamWith
	}
	return ""
}

func (x *Nic) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Nic) GetNicType() string {
	if x != nil {
		return x.NicType
	}
	return ""
}

func (x *Nic) GetLinkUp() bool {
	if x != nil {
		return x.LinkUp
	}
	return false
}

func (x *Nic) GetMtu() int64 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Nic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nic) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type VDDKConInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port   int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	User   string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Passwd string `protobuf:"bytes,4,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Vmref  string `protobuf:"bytes,5,opt,name=vmref,proto3" json:"vmref,omitempty"`
}

func (x *VDDKConInfo) Reset() {
	*x = VDDKConInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VDDKConInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDDKConInfo) ProtoMessage() {}

func (x *VDDKConInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDDKConInfo.ProtoReflect.Descriptor instead.
func (*VDDKConInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *VDDKConInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VDDKConInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VDDKConInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *VDDKConInfo) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *VDDKConInfo) GetVmref() string {
	if x != nil {
		return x.Vmref
	}
	return ""
}

type DeployInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey               *SSHKeys         `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Deploys                 []*DeployContent `protobuf:"bytes,2,rep,name=deploys,proto3" json:"deploys,omitempty"`
	Password                string           `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	IsInit                  bool             `protobuf:"varint,4,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	EnableTty               bool             `protobuf:"varint,5,opt,name=enable_tty,json=enableTty,proto3" json:"enable_tty,omitempty"`
	DefaultRootUser         bool             `protobuf:"varint,6,opt,name=default_root_user,json=defaultRootUser,proto3" json:"default_root_user,omitempty"`
	WindowsDefaultAdminUser bool             `protobuf:"varint,7,opt,name=windows_default_admin_user,json=windowsDefaultAdminUser,proto3" json:"windows_default_admin_user,omitempty"`
	EnableCloudInit         bool             `protobuf:"varint,8,opt,name=enable_cloud_init,json=enableCloudInit,proto3" json:"enable_cloud_init,omitempty"`
	LoginAccount            string           `protobuf:"bytes,9,opt,name=login_account,json=loginAccount,proto3" json:"login_account,omitempty"`
	Telegraf                *Telegraf        `protobuf:"bytes,10,opt,name=telegraf,proto3" json:"telegraf,omitempty"`
	UserData                string           `protobuf:"bytes,11,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *DeployInfo) Reset() {
	*x = DeployInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployInfo) ProtoMessage() {}

func (x *DeployInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployInfo.ProtoReflect.Descriptor instead.
func (*DeployInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *DeployInfo) GetPublicKey() *SSHKeys {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DeployInfo) GetDeploys() []*DeployContent {
	if x != nil {
		return x.Deploys
	}
	return nil
}

func (x *DeployInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeployInfo) GetIsInit() bool {
	if x != nil {
		return x.IsInit
	}
	return false
}

func (x *DeployInfo) GetEnableTty() bool {
	if x != nil {
		return x.EnableTty
	}
	return false
}

func (x *DeployInfo) GetDefaultRootUser() bool {
	if x != nil {
		return x.DefaultRootUser
	}
	return false
}

func (x *DeployInfo) GetWindowsDefaultAdminUser() bool {
	if x != nil {
		return x.WindowsDefaultAdminUser
	}
	return false
}

func (x *DeployInfo) GetEnableCloudInit() bool {
	if x != nil {
		return x.EnableCloudInit
	}
	return false
}

func (x *DeployInfo) GetLoginAccount() string {
	if x != nil {
		return x.LoginAccount
	}
	return ""
}

func (x *DeployInfo) GetTelegraf() *Telegraf {
	if x != nil {
		return x.Telegraf
	}
	return nil
}

func (x *DeployInfo) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

type Telegraf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegrafConf string `protobuf:"bytes,1,opt,name=telegraf_conf,json=telegrafConf,proto3" json:"telegraf_conf,omitempty"`
}

func (x *Telegraf) Reset() {
	*x = Telegraf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telegraf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telegraf) ProtoMessage() {}

func (x *Telegraf) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telegraf.ProtoReflect.Descriptor instead.
func (*Telegraf) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{5}
}

func (x *Telegraf) GetTelegrafConf() string {
	if x != nil {
		return x.TelegrafConf
	}
	return ""
}

type SSHKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey        string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	DeletePublicKey  string `protobuf:"bytes,2,opt,name=delete_public_key,json=deletePublicKey,proto3" json:"delete_public_key,omitempty"`
	AdminPublicKey   string `protobuf:"bytes,3,opt,name=admin_public_key,json=adminPublicKey,proto3" json:"admin_public_key,omitempty"`
	ProjectPublicKey string `protobuf:"bytes,4,opt,name=project_public_key,json=projectPublicKey,proto3" json:"project_public_key,omitempty"`
}

func (x *SSHKeys) Reset() {
	*x = SSHKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKeys) ProtoMessage() {}

func (x *SSHKeys) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKeys.ProtoReflect.Descriptor instead.
func (*SSHKeys) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{6}
}

func (x *SSHKeys) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SSHKeys) GetDeletePublicKey() string {
	if x != nil {
		return x.DeletePublicKey
	}
	return ""
}

func (x *SSHKeys) GetAdminPublicKey() string {
	if x != nil {
		return x.AdminPublicKey
	}
	return ""
}

func (x *SSHKeys) GetProjectPublicKey() string {
	if x != nil {
		return x.ProjectPublicKey
	}
	return ""
}

type DeployContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Action  string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *DeployContent) Reset() {
	*x = DeployContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployContent) ProtoMessage() {}

func (x *DeployContent) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployContent.ProtoReflect.Descriptor instead.
func (*DeployContent) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{7}
}

func (x *DeployContent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeployContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DeployContent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{8}
}

type DeployGuestFsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distro           string `protobuf:"bytes,1,opt,name=distro,proto3" json:"distro,omitempty"`
	Version          string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Arch             string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Language         string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Os               string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Account          string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Key              string `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	TelegrafDeployed bool   `protobuf:"varint,8,opt,name=telegraf_deployed,json=telegrafDeployed,proto3" json:"telegraf_deployed,omitempty"`
}

func (x *DeployGuestFsResponse) Reset() {
	*x = DeployGuestFsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployGuestFsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployGuestFsResponse) ProtoMessage() {}

func (x *DeployGuestFsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployGuestFsResponse.ProtoReflect.Descriptor instead.
func (*DeployGuestFsResponse) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{9}
}

func (x *DeployGuestFsResponse) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *DeployGuestFsResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployGuestFsResponse) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *DeployGuestFsResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *DeployGuestFsResponse) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DeployGuestFsResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *DeployGuestFsResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeployGuestFsResponse) GetTelegrafDeployed() bool {
	if x != nil {
		return x.TelegrafDeployed
	}
	return false
}

type DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path            string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	EncryptPassword string `protobuf:"bytes,2,opt,name=encrypt_password,json=encryptPassword,proto3" json:"encrypt_password,omitempty"`
	EncryptFormat   string `protobuf:"bytes,3,opt,name=encrypt_format,json=encryptFormat,proto3" json:"encrypt_format,omitempty"`
	EncryptAlg      string `protobuf:"bytes,4,opt,name=encrypt_alg,json=encryptAlg,proto3" json:"encrypt_alg,omitempty"`
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{10}
}

func (x *DiskInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DiskInfo) GetEncryptPassword() string {
	if x != nil {
		return x.EncryptPassword
	}
	return ""
}

func (x *DiskInfo) GetEncryptFormat() string {
	if x != nil {
		return x.EncryptFormat
	}
	return ""
}

func (x *DiskInfo) GetEncryptAlg() string {
	if x != nil {
		return x.EncryptAlg
	}
	return ""
}

type DeployParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskInfo   *DiskInfo    `protobuf:"bytes,1,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info,omitempty"`
	GuestDesc  *GuestDesc   `protobuf:"bytes,2,opt,name=guest_desc,json=guestDesc,proto3" json:"guest_desc,omitempty"`
	DeployInfo *DeployInfo  `protobuf:"bytes,3,opt,name=deploy_info,json=deployInfo,proto3" json:"deploy_info,omitempty"`
	VddkInfo   *VDDKConInfo `protobuf:"bytes,4,opt,name=vddk_info,json=vddkInfo,proto3" json:"vddk_info,omitempty"`
}

func (x *DeployParams) Reset() {
	*x = DeployParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployParams) ProtoMessage() {}

func (x *DeployParams) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployParams.ProtoReflect.Descriptor instead.
func (*DeployParams) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{11}
}

func (x *DeployParams) GetDiskInfo() *DiskInfo {
	if x != nil {
		return x.DiskInfo
	}
	return nil
}

func (x *DeployParams) GetGuestDesc() *GuestDesc {
	if x != nil {
		return x.GuestDesc
	}
	return nil
}

func (x *DeployParams) GetDeployInfo() *DeployInfo {
	if x != nil {
		return x.DeployInfo
	}
	return nil
}

func (x *DeployParams) GetVddkInfo() *VDDKConInfo {
	if x != nil {
		return x.VddkInfo
	}
	return nil
}

type ResizeFsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskInfo   *DiskInfo    `protobuf:"bytes,1,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info,omitempty"`
	Hypervisor string       `protobuf:"bytes,2,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	VddkInfo   *VDDKConInfo `protobuf:"bytes,3,opt,name=vddk_info,json=vddkInfo,proto3" json:"vddk_info,omitempty"`
}

func (x *ResizeFsParams) Reset() {
	*x = ResizeFsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeFsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeFsParams) ProtoMessage() {}

func (x *ResizeFsParams) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeFsParams.ProtoReflect.Descriptor instead.
func (*ResizeFsParams) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{12}
}

func (x *ResizeFsParams) GetDiskInfo() *DiskInfo {
	if x != nil {
		return x.DiskInfo
	}
	return nil
}

func (x *ResizeFsParams) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *ResizeFsParams) GetVddkInfo() *VDDKConInfo {
	if x != nil {
		return x.VddkInfo
	}
	return nil
}

type FormatFsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskInfo *DiskInfo `protobuf:"bytes,1,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info,omitempty"`
	FsFormat string    `protobuf:"bytes,2,opt,name=fs_format,json=fsFormat,proto3" json:"fs_format,omitempty"`
	Uuid     string    `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *FormatFsParams) Reset() {
	*x = FormatFsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatFsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatFsParams) ProtoMessage() {}

func (x *FormatFsParams) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatFsParams.ProtoReflect.Descriptor instead.
func (*FormatFsParams) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{13}
}

func (x *FormatFsParams) GetDiskInfo() *DiskInfo {
	if x != nil {
		return x.DiskInfo
	}
	return nil
}

func (x *FormatFsParams) GetFsFormat() string {
	if x != nil {
		return x.FsFormat
	}
	return ""
}

func (x *FormatFsParams) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ReleaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distro   string `protobuf:"bytes,1,opt,name=distro,proto3" json:"distro,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Arch     string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ReleaseInfo) Reset() {
	*x = ReleaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInfo) ProtoMessage() {}

func (x *ReleaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInfo.ProtoReflect.Descriptor instead.
func (*ReleaseInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{14}
}

func (x *ReleaseInfo) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *ReleaseInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReleaseInfo) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ReleaseInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SaveToGlanceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskInfo *DiskInfo `protobuf:"bytes,1,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info,omitempty"`
	Compress bool      `protobuf:"varint,2,opt,name=compress,proto3" json:"compress,omitempty"`
}

func (x *SaveToGlanceParams) Reset() {
	*x = SaveToGlanceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveToGlanceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveToGlanceParams) ProtoMessage() {}

func (x *SaveToGlanceParams) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveToGlanceParams.ProtoReflect.Descriptor instead.
func (*SaveToGlanceParams) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{15}
}

func (x *SaveToGlanceParams) GetDiskInfo() *DiskInfo {
	if x != nil {
		return x.DiskInfo
	}
	return nil
}

func (x *SaveToGlanceParams) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

type SaveToGlanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsInfo      string       `protobuf:"bytes,1,opt,name=os_info,json=osInfo,proto3" json:"os_info,omitempty"`
	ReleaseInfo *ReleaseInfo `protobuf:"bytes,2,opt,name=release_info,json=releaseInfo,proto3" json:"release_info,omitempty"`
}

func (x *SaveToGlanceResponse) Reset() {
	*x = SaveToGlanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveToGlanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveToGlanceResponse) ProtoMessage() {}

func (x *SaveToGlanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveToGlanceResponse.ProtoReflect.Descriptor instead.
func (*SaveToGlanceResponse) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{16}
}

func (x *SaveToGlanceResponse) GetOsInfo() string {
	if x != nil {
		return x.OsInfo
	}
	return ""
}

func (x *SaveToGlanceResponse) GetReleaseInfo() *ReleaseInfo {
	if x != nil {
		return x.ReleaseInfo
	}
	return nil
}

type ProbeImageInfoPramas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskInfo *DiskInfo `protobuf:"bytes,1,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info,omitempty"`
}

func (x *ProbeImageInfoPramas) Reset() {
	*x = ProbeImageInfoPramas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeImageInfoPramas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeImageInfoPramas) ProtoMessage() {}

func (x *ProbeImageInfoPramas) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeImageInfoPramas.ProtoReflect.Descriptor instead.
func (*ProbeImageInfoPramas) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{17}
}

func (x *ProbeImageInfoPramas) GetDiskInfo() *DiskInfo {
	if x != nil {
		return x.DiskInfo
	}
	return nil
}

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsInfo                *ReleaseInfo `protobuf:"bytes,1,opt,name=os_info,json=osInfo,proto3" json:"os_info,omitempty"`
	OsType                string       `protobuf:"bytes,2,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	IsUefiSupport         bool         `protobuf:"varint,3,opt,name=is_uefi_support,json=isUefiSupport,proto3" json:"is_uefi_support,omitempty"`
	IsLvmPartition        bool         `protobuf:"varint,4,opt,name=is_lvm_partition,json=isLvmPartition,proto3" json:"is_lvm_partition,omitempty"`
	IsReadonly            bool         `protobuf:"varint,5,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	PhysicalPartitionType string       `protobuf:"bytes,6,opt,name=physical_partition_type,json=physicalPartitionType,proto3" json:"physical_partition_type,omitempty"`
	IsInstalledCloudInit  bool         `protobuf:"varint,7,opt,name=is_installed_cloud_init,json=isInstalledCloudInit,proto3" json:"is_installed_cloud_init,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{18}
}

func (x *ImageInfo) GetOsInfo() *ReleaseInfo {
	if x != nil {
		return x.OsInfo
	}
	return nil
}

func (x *ImageInfo) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *ImageInfo) GetIsUefiSupport() bool {
	if x != nil {
		return x.IsUefiSupport
	}
	return false
}

func (x *ImageInfo) GetIsLvmPartition() bool {
	if x != nil {
		return x.IsLvmPartition
	}
	return false
}

func (x *ImageInfo) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *ImageInfo) GetPhysicalPartitionType() string {
	if x != nil {
		return x.PhysicalPartitionType
	}
	return ""
}

func (x *ImageInfo) GetIsInstalledCloudInit() bool {
	if x != nil {
		return x.IsInstalledCloudInit
	}
	return false
}

type EsxiDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskPath string `protobuf:"bytes,1,opt,name=disk_path,json=diskPath,proto3" json:"disk_path,omitempty"`
}

func (x *EsxiDiskInfo) Reset() {
	*x = EsxiDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsxiDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsxiDiskInfo) ProtoMessage() {}

func (x *EsxiDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsxiDiskInfo.ProtoReflect.Descriptor instead.
func (*EsxiDiskInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{19}
}

func (x *EsxiDiskInfo) GetDiskPath() string {
	if x != nil {
		return x.DiskPath
	}
	return ""
}

type ConnectEsxiDisksParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VddkInfo   *VDDKConInfo    `protobuf:"bytes,1,opt,name=vddk_info,json=vddkInfo,proto3" json:"vddk_info,omitempty"`
	AccessInfo []*EsxiDiskInfo `protobuf:"bytes,2,rep,name=access_info,json=accessInfo,proto3" json:"access_info,omitempty"`
}

func (x *ConnectEsxiDisksParams) Reset() {
	*x = ConnectEsxiDisksParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectEsxiDisksParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectEsxiDisksParams) ProtoMessage() {}

func (x *ConnectEsxiDisksParams) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectEsxiDisksParams.ProtoReflect.Descriptor instead.
func (*ConnectEsxiDisksParams) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectEsxiDisksParams) GetVddkInfo() *VDDKConInfo {
	if x != nil {
		return x.VddkInfo
	}
	return nil
}

func (x *ConnectEsxiDisksParams) GetAccessInfo() []*EsxiDiskInfo {
	if x != nil {
		return x.AccessInfo
	}
	return nil
}

type EsxiDisksConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*EsxiDiskInfo `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *EsxiDisksConnectionInfo) Reset() {
	*x = EsxiDisksConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsxiDisksConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsxiDisksConnectionInfo) ProtoMessage() {}

func (x *EsxiDisksConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsxiDisksConnectionInfo.ProtoReflect.Descriptor instead.
func (*EsxiDisksConnectionInfo) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{21}
}

func (x *EsxiDisksConnectionInfo) GetDisks() []*EsxiDiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

var File_deploy_proto protoreflect.FileDescriptor

var file_deploy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x61, 0x70, 0x69, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x09, 0x47, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x6e, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x4e,
	0x69, 0x63, 0x52, 0x0b, 0x6e, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x03,
	0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x69, 0x6f, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x69, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x66, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x76, 0x22, 0x89, 0x05, 0x0a, 0x03, 0x4e, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x73, 0x6b, 0x6c, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x73,
	0x6b, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x62, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x62, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x75, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x0b, 0x56, 0x44, 0x44, 0x4b, 0x43, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6d, 0x72, 0x65,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6d, 0x72, 0x65, 0x66, 0x22, 0xc0,
	0x03, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x2f, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0xac, 0x01, 0x0a, 0x07, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x55, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x66, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x66, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6c, 0x67, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x76,
	0x64, 0x64, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x44, 0x44, 0x4b, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x76, 0x64, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x76,
	0x64, 0x64, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x44, 0x44, 0x4b, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x76, 0x64, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x12,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x14, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x6f, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x43, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x61, 0x6d, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x75, 0x65, 0x66, 0x69, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x65, 0x66, 0x69, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6c, 0x76, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x4c, 0x76, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x2b, 0x0a, 0x0c,
	0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7d, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x64, 0x64, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x56, 0x44,
	0x44, 0x4b, 0x43, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x64, 0x64, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x17, 0x45, 0x73, 0x78, 0x69,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x73, 0x78, 0x69, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x32, 0xc6, 0x03,
	0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x47, 0x75, 0x65, 0x73, 0x74, 0x46, 0x73, 0x12, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x46, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x73, 0x12, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x73, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a,
	0x0c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x47, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x6f, 0x47, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x61, 0x6d, 0x61,
	0x73, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x73, 0x78,
	0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x73, 0x78, 0x69,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x45, 0x73, 0x78, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x34, 0x5a, 0x32, 0x79, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x2e, 0x69, 0x6f, 0x2f, 0x78, 0x2f, 0x6f, 0x6e, 0x65, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x6e, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deploy_proto_rawDescOnce sync.Once
	file_deploy_proto_rawDescData = file_deploy_proto_rawDesc
)

func file_deploy_proto_rawDescGZIP() []byte {
	file_deploy_proto_rawDescOnce.Do(func() {
		file_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_deploy_proto_rawDescData)
	})
	return file_deploy_proto_rawDescData
}

var file_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_deploy_proto_goTypes = []interface{}{
	(*GuestDesc)(nil),               // 0: apis.GuestDesc
	(*Disk)(nil),                    // 1: apis.Disk
	(*Nic)(nil),                     // 2: apis.Nic
	(*VDDKConInfo)(nil),             // 3: apis.VDDKConInfo
	(*DeployInfo)(nil),              // 4: apis.DeployInfo
	(*Telegraf)(nil),                // 5: apis.Telegraf
	(*SSHKeys)(nil),                 // 6: apis.SSHKeys
	(*DeployContent)(nil),           // 7: apis.DeployContent
	(*Empty)(nil),                   // 8: apis.Empty
	(*DeployGuestFsResponse)(nil),   // 9: apis.DeployGuestFsResponse
	(*DiskInfo)(nil),                // 10: apis.DiskInfo
	(*DeployParams)(nil),            // 11: apis.DeployParams
	(*ResizeFsParams)(nil),          // 12: apis.ResizeFsParams
	(*FormatFsParams)(nil),          // 13: apis.FormatFsParams
	(*ReleaseInfo)(nil),             // 14: apis.ReleaseInfo
	(*SaveToGlanceParams)(nil),      // 15: apis.SaveToGlanceParams
	(*SaveToGlanceResponse)(nil),    // 16: apis.SaveToGlanceResponse
	(*ProbeImageInfoPramas)(nil),    // 17: apis.ProbeImageInfoPramas
	(*ImageInfo)(nil),               // 18: apis.ImageInfo
	(*EsxiDiskInfo)(nil),            // 19: apis.EsxiDiskInfo
	(*ConnectEsxiDisksParams)(nil),  // 20: apis.ConnectEsxiDisksParams
	(*EsxiDisksConnectionInfo)(nil), // 21: apis.EsxiDisksConnectionInfo
}
var file_deploy_proto_depIdxs = []int32{
	2,  // 0: apis.GuestDesc.nics:type_name -> apis.Nic
	2,  // 1: apis.GuestDesc.nics_standby:type_name -> apis.Nic
	1,  // 2: apis.GuestDesc.disks:type_name -> apis.Disk
	6,  // 3: apis.DeployInfo.public_key:type_name -> apis.SSHKeys
	7,  // 4: apis.DeployInfo.deploys:type_name -> apis.DeployContent
	5,  // 5: apis.DeployInfo.telegraf:type_name -> apis.Telegraf
	10, // 6: apis.DeployParams.disk_info:type_name -> apis.DiskInfo
	0,  // 7: apis.DeployParams.guest_desc:type_name -> apis.GuestDesc
	4,  // 8: apis.DeployParams.deploy_info:type_name -> apis.DeployInfo
	3,  // 9: apis.DeployParams.vddk_info:type_name -> apis.VDDKConInfo
	10, // 10: apis.ResizeFsParams.disk_info:type_name -> apis.DiskInfo
	3,  // 11: apis.ResizeFsParams.vddk_info:type_name -> apis.VDDKConInfo
	10, // 12: apis.FormatFsParams.disk_info:type_name -> apis.DiskInfo
	10, // 13: apis.SaveToGlanceParams.disk_info:type_name -> apis.DiskInfo
	14, // 14: apis.SaveToGlanceResponse.release_info:type_name -> apis.ReleaseInfo
	10, // 15: apis.ProbeImageInfoPramas.disk_info:type_name -> apis.DiskInfo
	14, // 16: apis.ImageInfo.os_info:type_name -> apis.ReleaseInfo
	3,  // 17: apis.ConnectEsxiDisksParams.vddk_info:type_name -> apis.VDDKConInfo
	19, // 18: apis.ConnectEsxiDisksParams.access_info:type_name -> apis.EsxiDiskInfo
	19, // 19: apis.EsxiDisksConnectionInfo.disks:type_name -> apis.EsxiDiskInfo
	11, // 20: apis.DeployAgent.DeployGuestFs:input_type -> apis.DeployParams
	12, // 21: apis.DeployAgent.ResizeFs:input_type -> apis.ResizeFsParams
	13, // 22: apis.DeployAgent.FormatFs:input_type -> apis.FormatFsParams
	15, // 23: apis.DeployAgent.SaveToGlance:input_type -> apis.SaveToGlanceParams
	17, // 24: apis.DeployAgent.ProbeImageInfo:input_type -> apis.ProbeImageInfoPramas
	20, // 25: apis.DeployAgent.ConnectEsxiDisks:input_type -> apis.ConnectEsxiDisksParams
	21, // 26: apis.DeployAgent.DisconnectEsxiDisks:input_type -> apis.EsxiDisksConnectionInfo
	9,  // 27: apis.DeployAgent.DeployGuestFs:output_type -> apis.DeployGuestFsResponse
	8,  // 28: apis.DeployAgent.ResizeFs:output_type -> apis.Empty
	8,  // 29: apis.DeployAgent.FormatFs:output_type -> apis.Empty
	16, // 30: apis.DeployAgent.SaveToGlance:output_type -> apis.SaveToGlanceResponse
	18, // 31: apis.DeployAgent.ProbeImageInfo:output_type -> apis.ImageInfo
	21, // 32: apis.DeployAgent.ConnectEsxiDisks:output_type -> apis.EsxiDisksConnectionInfo
	8,  // 33: apis.DeployAgent.DisconnectEsxiDisks:output_type -> apis.Empty
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_deploy_proto_init() }
func file_deploy_proto_init() {
	if File_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VDDKConInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telegraf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployGuestFsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeFsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatFsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveToGlanceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveToGlanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeImageInfoPramas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsxiDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectEsxiDisksParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsxiDisksConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deploy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deploy_proto_goTypes,
		DependencyIndexes: file_deploy_proto_depIdxs,
		MessageInfos:      file_deploy_proto_msgTypes,
	}.Build()
	File_deploy_proto = out.File
	file_deploy_proto_rawDesc = nil
	file_deploy_proto_goTypes = nil
	file_deploy_proto_depIdxs = nil
}
